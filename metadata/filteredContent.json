{
  "timestamp": "2025-02-06T01:43:59.197Z",
  "files": [
    {
      "path": "components/Navigation.tsx",
      "content": "import { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport default function Navigation() {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [isDesktop, setIsDesktop] = useState(false);\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      setIsDesktop(window.innerWidth >= 640);\n      window.addEventListener(\"resize\", () => setIsDesktop(window.innerWidth >= 640));\n    }\n  }, []);\n\n  return (\n    <>\n      {/* Floating Menu Button (Mobile) */}\n      {!isDesktop && (\n        <button\n          className=\"fixed top-4 left-4 sm:hidden bg-yellow-400 text-black px-4 py-2 rounded-lg shadow-md\"\n          onClick={() => setMenuOpen(true)}\n        >\n          ‚ò∞ Menu\n        </button>\n      )}\n\n      {/* Sidebar Menu with Smooth Animation */}\n      <AnimatePresence>\n        {(menuOpen || isDesktop) && (\n          <motion.nav\n            initial={{ x: \"-100%\" }}\n            animate={{ x: 0 }}\n            exit={{ x: \"-100%\" }}\n            transition={{ duration: 0.3, ease: \"easeOut\" }}\n            className=\"fixed top-0 left-0 h-screen w-64 bg-black text-green-400 p-6 shadow-lg sm:translate-x-0\"\n          >\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-xl font-bold\">Course Navigation</h2>\n              {/* Close Button (Only on Mobile) */}\n              {!isDesktop && (\n                <button\n                  className=\"text-yellow-400 border border-yellow-400 px-3 py-1 rounded\"\n                  onClick={() => setMenuOpen(false)}\n                >\n                  ‚úï Close\n                </button>\n              )}\n            </div>\n\n            <ul className=\"space-y-3\">\n              <li>\n                <Link href=\"/\" className=\"hover:text-yellow-400\">üè† Home</Link>\n              </li>\n              <li>\n                <Link href=\"/module/module1\" className=\"hover:text-yellow-400\">üìö History of Money</Link>\n              </li>\n              <li>\n                <Link href=\"/terms/module1\" className=\"hover:text-yellow-400\">üìñ Terms & Glossary</Link>\n              </li>\n            </ul>\n          </motion.nav>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}"
    },
    {
      "path": "components/Slideshow.tsx",
      "content": "import { useState } from \"react\";\nimport Image from \"next/image\";\nimport { useRouter } from \"next/router\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport default function Slideshow({ slides, moduleId, currentSlideIndex, totalSlides }) {\n  const [currentSlide, setCurrentSlide] = useState(currentSlideIndex);\n  const router = useRouter();\n\n  const nextSlide = () => {\n    if (currentSlide < slides.length - 1) {\n      setCurrentSlide(currentSlide + 1);\n    }\n  };\n\n  const prevSlide = () => {\n    if (currentSlide > 0) {\n      setCurrentSlide(currentSlide - 1);\n    }\n  };\n\n  // Swipe Gesture Handlers\n  const handlers = useSwipeable({\n    onSwipedLeft: nextSlide,\n    onSwipedRight: prevSlide,\n    preventScrollOnSwipe: true,\n    trackMouse: true,\n  });\n\n  return (\n    <div {...handlers} className=\"flex flex-col items-center p-4 sm:p-6 bg-black text-green-400 font-mono min-h-screen w-full\">\n      {/* Progress Bar */}\n      <div className=\"w-full bg-gray-700 h-1 mt-2\">\n        <motion.div\n          initial={{ width: \"0%\" }}\n          animate={{ width: `${((currentSlide + 1) / totalSlides) * 100}%` }}\n          transition={{ duration: 0.5 }}\n          className=\"bg-green-400 h-1\"\n        />\n      </div>\n\n      {/* Slide Transition */}\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={currentSlide} // Ensures animations work per slide change\n          initial={{ opacity: 0, x: 100 }}\n          animate={{ opacity: 1, x: 0 }}\n          exit={{ opacity: 0, x: -100 }}\n          transition={{ duration: 0.5 }}\n          className=\"w-full flex flex-col items-center\"\n        >\n          {/* Slide Title & Description */}\n          <h2 className=\"text-xl sm:text-3xl font-bold text-center\">{slides[currentSlide].title}</h2>\n          <p className=\"text-gray-400 text-sm sm:text-lg text-center mt-2\">{slides[currentSlide].description}</p>\n\n          {/* Slide Image */}\n          {slides[currentSlide].image && (\n            <div className=\"w-full flex justify-center my-4\">\n              <Image\n                src={slides[currentSlide].image}\n                width={400}\n                height={300}\n                alt={slides[currentSlide].title}\n                className=\"rounded-lg max-w-full\"\n              />\n            </div>\n          )}\n\n          {/* Slide Content List */}\n          <ul className=\"list-disc pl-5 text-sm sm:text-lg mt-2\">\n            {slides[currentSlide].content.map((text, index) => (\n              <li key={index} className=\"my-1\">{text}</li>\n            ))}\n          </ul>\n        </motion.div>\n      </AnimatePresence>\n\n      {/* Navigation Buttons */}\n      <div className=\"flex justify-between w-full max-w-xs sm:max-w-xl mt-6\">\n        <button\n          onClick={prevSlide}\n          className={`px-4 sm:px-6 py-2 sm:py-3 bg-gray-900 border border-green-400 rounded-lg transition ${\n            currentSlide === 0 ? \"cursor-not-allowed opacity-50\" : \"hover:bg-gray-800 hover:text-yellow-400\"\n          }`}\n          disabled={currentSlide === 0}\n        >\n          ‚óÄ Previous\n        </button>\n        <span className=\"text-sm sm:text-lg\">{currentSlide + 1} / {totalSlides}</span>\n        <button\n          onClick={nextSlide}\n          className={`px-4 sm:px-6 py-2 sm:py-3 bg-gray-900 border border-green-400 rounded-lg transition ${\n            currentSlide === slides.length - 1 ? \"cursor-not-allowed opacity-50\" : \"hover:bg-gray-800 hover:text-yellow-400\"\n          }`}\n          disabled={currentSlide === slides.length - 1}\n        >\n          Next ‚ñ∂\n        </button>\n      </div>\n\n      {/* Swipe Indicator (Only visible on mobile) */}\n      <p className=\"text-gray-500 text-sm sm:hidden mt-4\">Swipe left or right to navigate üì≤</p>\n    </div>\n  );\n}"
    },
    {
      "path": "get-app-content.js",
      "content": "const fs = require('fs');\nconst path = require('path');\n\n// Adjust the target directory to one level above\nconst targetDirectory = path.resolve(__dirname, '.');\nconst metadataDirectory = path.resolve(__dirname, 'metadata');\n\n// Ensure the metadata directory exists\nif (!fs.existsSync(metadataDirectory)) {\n    fs.mkdirSync(metadataDirectory);\n}\n\nconst sitemapFilePath = path.resolve(metadataDirectory, 'sitemap.md');\nconst outputFilePath = path.resolve(metadataDirectory, 'filteredContent.json');\n\n// Folders to exclude from the folder structure mapping\nconst excludedFolders = new Set([\n    '.git',\n    '.next',\n    '.contentlayer',\n    '.github',\n    '.husky',\n    '.vscode',\n    '.yarn',\n    'node_modules',\n    'api/studio/.sanity',\n    'api/studio/dist',\n]);\n\nfunction getFolderStructure(dir, currentPath = '') {\n    const result = {};\n    const items = fs.readdirSync(dir);\n\n    items.forEach((item) => {\n        const itemPath = path.join(dir, item);\n        const stats = fs.statSync(itemPath);\n\n        if (stats.isDirectory()) {\n            if (!excludedFolders.has(item)) {\n                const newPath = path.join(currentPath, item);\n                result[item] = getFolderStructure(itemPath, newPath);\n            }\n        } else {\n            result[item] = path.join(currentPath, item);\n        }\n    });\n\n    return result;\n}\n\nfunction convertToMarkdown(structure, indent = '') {\n    let markdown = '';\n\n    for (const key in structure) {\n        if (typeof structure[key] === 'object') {\n            markdown += `${indent}- ${key}\\n`;\n            markdown += convertToMarkdown(structure[key], `${indent}  `);\n        } else {\n            markdown += `${indent}  - ${structure[key]}\\n`;\n        }\n    }\n\n    return markdown;\n}\n\nfunction readFileAsJson(filePath, relativePath) {\n    try {\n        const content = fs.readFileSync(filePath, 'utf-8').trim();\n        if (content) {\n            return { path: relativePath, content };\n        }\n    } catch (error) {\n        console.error(`Error reading file: ${filePath}`, error);\n    }\n    return null;\n}\n\nfunction processSitemapToJson(sitemapPath, outputPath) {\n    try {\n        const excludedFiles = [\n            'package-lock.json',\n            'README.md',\n            '.gitignore',\n            '.env',\n            'getFolderStructure.js',\n            'next-env.d.ts',\n            'next.config.ts',\n            'sitemap.md',\n            'src/app/favicon.ico',\n            'studio/eslint.config.mjs',\n            'studio/package.json',\n            'studio/static/.gitkeep',\n            'studio/tsconfig.json',\n            'studio/sanity.cli.ts',\n            'filteredContent.json'\n        ];\n        const excludedExtensions = ['.jpeg', '.jpg', '.png', '.svg', '.gif', '.ico', '.md'];\n        const excludedPaths = [\n            '.sanity/',\n            'studio/.sanity/runtime/',\n            'z-utils/'\n        ];\n\n        const sitemap = fs.readFileSync(sitemapPath, 'utf-8');\n        const lines = sitemap.split('\\n');\n        const combinedContent = [];\n\n        lines.forEach((line) => {\n            const match = line.trim().match(/-\\s*(.*)/);\n            if (match) {\n                const relativePath = match[1].trim();\n                const fullPath = path.resolve(targetDirectory, relativePath);\n\n                if (\n                    fs.existsSync(fullPath) &&\n                    fs.lstatSync(fullPath).isFile() &&\n                    !excludedFiles.includes(path.basename(relativePath)) &&\n                    !excludedExtensions.includes(path.extname(relativePath)) &&\n                    !excludedPaths.some((excludedPath) => relativePath.startsWith(excludedPath))\n                ) {\n                    const fileData = readFileAsJson(fullPath, relativePath);\n                    if (fileData) {\n                        combinedContent.push(fileData);\n                    }\n                }\n            }\n        });\n\n        const timestamp = new Date().toISOString();\n        const outputData = { timestamp, files: combinedContent };\n\n        fs.writeFileSync(outputPath, JSON.stringify(outputData, null, 2), 'utf-8');\n        console.log(`Filtered JSON content has been saved to ${outputPath}`);\n    } catch (error) {\n        console.error(`Error processing sitemap: ${sitemapPath}`, error);\n    }\n}\n\n// Generate the folder structure and save it as a sitemap\nconst folderStructure = getFolderStructure(targetDirectory);\nconst markdownOutput = convertToMarkdown(folderStructure);\nfs.writeFileSync(sitemapFilePath, markdownOutput, 'utf-8');\nconsole.log('Sitemap has been saved to sitemap.md');\n\n// Process the sitemap to generate the filtered JSON\nprocessSitemapToJson(sitemapFilePath, outputFilePath);"
    },
    {
      "path": "package.json",
      "content": "{\n  \"name\": \"beeteecee-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"framer-motion\": \"^12.3.1\",\n    \"next\": \"15.1.6\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"react-swipeable\": \"^7.0.2\",\n    \"swiper\": \"^11.2.2\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^19\",\n    \"@types/react-dom\": \"^19\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\"\n  }\n}"
    },
    {
      "path": "pages/_app.tsx",
      "content": "import Navigation from \"@/components/Navigation\";\nimport \"@/styles/globals.css\";\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <div className=\"flex bg-black text-green-400 font-mono min-h-screen\">\n      <Navigation />\n      <main className=\"ml-0 sm:ml-64 w-full p-6\">\n        <Component {...pageProps} />\n      </main>\n    </div>\n  );\n}"
    },
    {
      "path": "pages/_document.tsx",
      "content": "import { Html, Head, Main, NextScript } from \"next/document\";\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body className=\"antialiased\">\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}"
    },
    {
      "path": "pages/api/hello.ts",
      "content": "// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport type { NextApiRequest, NextApiResponse } from \"next\";\n\ntype Data = {\n  name: string;\n};\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Data>,\n) {\n  res.status(200).json({ name: \"John Doe\" });\n}"
    },
    {
      "path": "pages/class/[id].tsx",
      "content": "import { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport Slideshow from \"@/components/Slideshow\";\n\nexport default function ClassPage() {\n  const router = useRouter();\n  const { id } = router.query;\n  const [slides, setSlides] = useState([]);\n  const [moduleId, setModuleId] = useState(\"\");\n  const [slideIndex, setSlideIndex] = useState(0);\n\n  useEffect(() => {\n    if (!id) return;\n\n    const [module, slide] = id.split(\"-\");\n    setModuleId(module);\n    setSlideIndex(parseInt(slide, 10) || 0);\n\n    fetch(`/courses/${module}.json`)\n      .then(res => res.json())\n      .then(data => setSlides(data.slides || []));\n  }, [id]);\n\n  if (!slides.length) return <p className=\"text-white\">Loading slides...</p>;\n\n  return (\n    <Slideshow slides={slides} moduleId={moduleId} currentSlideIndex={slideIndex} totalSlides={slides.length} />\n  );\n}"
    },
    {
      "path": "pages/index.tsx",
      "content": "import Link from \"next/link\";\n\nexport default function Home() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-black text-green-400 font-mono\">\n      <h1 className=\"text-3xl sm:text-4xl font-bold tracking-wide text-center mb-6\">\n        Welcome to the History of Money\n      </h1>\n      <Link\n        href=\"/module/module1\"\n        className=\"px-6 py-3 bg-gray-900 border border-green-400 rounded-lg hover:bg-gray-800 hover:text-yellow-400 transition\"\n      >\n        Start Course\n      </Link>\n    </div>\n  );\n}"
    },
    {
      "path": "pages/module/[id].tsx",
      "content": "import { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\n\nexport default function ModulePage() {\n  const router = useRouter();\n  const { id } = router.query;\n  const [moduleData, setModuleData] = useState(null);\n\n  useEffect(() => {\n    if (!id) return;\n    fetch(`/courses/${id}.json`)\n      .then(res => res.json())\n      .then(data => setModuleData(data));\n  }, [id]);\n\n  if (!moduleData) return <p>Loading...</p>;\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <h2 className=\"text-3xl font-bold\">{moduleData.title}</h2>\n      {moduleData.slides.map((slide, index) => (\n        <Link \n            key={index} \n            href={`/class/${id}-${index}`} \n            className=\"block p-4 my-2 bg-gray-800 rounded-lg hover:bg-gray-700\"\n            >\n            {slide.title}\n        </Link>\n      ))}\n    </div>\n  );\n}"
    },
    {
      "path": "pages/terms/[id].tsx",
      "content": "import { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\n\nexport default function TermsPage() {\n  const router = useRouter();\n  const { id } = router.query;\n  const [terms, setTerms] = useState(null);\n\n  useEffect(() => {\n    if (!id) return;\n    fetch(`/courses/${id}.json`)\n      .then(res => res.json())\n      .then(data => setTerms(data.terms));\n  }, [id]);\n\n  if (!terms) return <p className=\"text-white\">Loading...</p>;\n\n  return (\n    <div className=\"container mx-auto p-6 bg-gray-900 text-white\">\n      <h2 className=\"text-3xl font-bold mb-4\">Glossary</h2>\n      <ul className=\"list-disc pl-5\">\n        {Object.entries(terms).map(([term, definition]) => (\n          <li key={term} className=\"my-2\">\n            <strong className=\"text-blue-400\">{term}:</strong> {definition}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}"
    },
    {
      "path": "postcss.config.mjs",
      "content": "/** @type {import('postcss-load-config').Config} */\nconst config = {\n  plugins: {\n    tailwindcss: {},\n  },\n};\n\nexport default config;"
    },
    {
      "path": "public/courses/module1.json",
      "content": "{\n    \"title\": \"History of Money\",\n    \"slides\": [\n        {\n            \"title\": \"What is Money?\",\n            \"description\": \"An overview of the fundamental concept of money.\",\n            \"image\": \"https://example.com/what-is-money.jpg\",\n            \"content\": [\n                \"Money is a medium of exchange, a unit of account, and a store of value.\",\n                \"Throughout history, money has taken different forms, including commodities, coins, and paper.\"\n            ]\n        },\n        {\n            \"title\": \"Commodity Money\",\n            \"description\": \"The first form of money was based on valuable goods.\",\n            \"image\": \"https://example.com/commodity-money.jpg\",\n            \"content\": [\n                \"People used valuable commodities like gold, silver, and salt as money.\",\n                \"The problem was that these items were not always easy to transport or divide.\"\n            ]\n        },\n        {\n            \"title\": \"Rise of Coins\",\n            \"description\": \"The first standardized coins were created for easier trade.\",\n            \"image\": \"https://example.com/coins.jpg\",\n            \"content\": [\n                \"Around 600 BC, the Lydians created the first metal coins.\",\n                \"Coins made transactions easier because they had a fixed value.\"\n            ]\n        },\n        {\n            \"title\": \"The Birth of Paper Money\",\n            \"description\": \"How paper money replaced metal coins as the dominant form of currency.\",\n            \"image\": \"https://example.com/paper-money.jpg\",\n            \"content\": [\n                \"In the 11th century, China introduced the first government-backed paper money.\",\n                \"Unlike coins, banknotes were easier to transport and store.\"\n            ]\n        },\n        {\n            \"title\": \"Digital Money\",\n            \"description\": \"The rise of digital transactions and cryptocurrencies.\",\n            \"image\": \"https://example.com/digital-money.jpg\",\n            \"content\": [\n                \"Credit cards and online banking revolutionized payments in the 20th century.\",\n                \"Bitcoin and other cryptocurrencies introduced a decentralized form of digital money.\"\n            ]\n        }\n    ],\n    \"terms\": {\n        \"commodity money\": \"Money whose value comes from the commodity it is made of, such as gold, silver, or salt.\",\n        \"mintage\": \"The process of producing coins and assigning them a nominal value.\",\n        \"banknote\": \"A paper note issued by a bank that represents a certain amount of money.\",\n        \"inflation\": \"The rate at which the general level of prices for goods and services rises, eroding purchasing power.\",\n        \"digital money\": \"Currency that exists only in digital form, such as cryptocurrencies or bank account balances.\"\n    }\n}"
    },
    {
      "path": "styles/globals.css",
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: #ffffff;\n  --foreground: #171717;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --background: #0a0a0a;\n    --foreground: #ededed;\n  }\n}\n\nbody {\n  color: var(--foreground);\n  background: var(--background);\n  font-family: Arial, Helvetica, sans-serif;\n}"
    },
    {
      "path": "tailwind.config.ts",
      "content": "// tailwind.config.js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./pages/**/*.{js,ts,jsx,tsx}\",\n    \"./components/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        'terminal-black': '#101010',\n        'terminal-green': '#00ff00',\n        'terminal-yellow': '#ffcc00',\n        'terminal-gray': '#333333',\n      },\n      fontFamily: {\n        mono: ['Courier New', 'Courier', 'monospace'],\n      },\n    },\n  },\n  plugins: [],\n};"
    },
    {
      "path": "tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2017\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n}"
    }
  ]
}